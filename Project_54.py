{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "376\n"
     ]
    }
   ],
   "source": [
    "# import Counter to find the duplicates\n",
    "from collections import Counter\n",
    "\n",
    "\n",
    "# return the value of highest valued card\n",
    "def high_card(hand):\n",
    "    highest = 0\n",
    "    for i in hand:\n",
    "        if i == 'A':\n",
    "            return 14\n",
    "        elif i == 'K':\n",
    "            if 13 >= highest:\n",
    "                highest = 13\n",
    "        elif i == 'Q':\n",
    "            if 12 >= highest:\n",
    "                highest = 12\n",
    "        elif i == 'J':\n",
    "            if 11 >= highest:\n",
    "                highest = 11\n",
    "        elif i == 'T':\n",
    "            if 10 >= highest:\n",
    "                highest = 10\n",
    "        elif int(i) > highest:\n",
    "            highest = int(i)\n",
    "    return highest\n",
    "\n",
    "\n",
    "# convert a given string to lists\n",
    "def convert_to_lists(s):\n",
    "    cards = s.split(' ')\n",
    "    card_value = []\n",
    "    card_type = []\n",
    "    for i in cards:\n",
    "        card_value.append(i[0])\n",
    "        card_type.append(i[1])\n",
    "    return [card_value, card_type]\n",
    "\n",
    "\n",
    "# return the number of pairs a given hand has. Also 1 is added to the pairs according to the priority list\n",
    "def number_of_pairs(l):\n",
    "    count = Counter(l) - Counter(set(l))\n",
    "    pairs = 0\n",
    "    for i in count:\n",
    "        if count[i] == 1:\n",
    "            pairs += 1\n",
    "    if pairs:\n",
    "        return pairs + 1\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 4 if there are three cards of same value\n",
    "def three_of_a_kind(l):\n",
    "    count = Counter(l) - Counter(set(l))\n",
    "    for i in count:\n",
    "        if count[i] == 2:\n",
    "            return 4\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 5 if all cards are consecutive values\n",
    "def straight(l):\n",
    "    rating = {14: 'A', 13: 'K', 12: 'Q', 11: 'J', 10: 'T', 9: '9', 8: '8', 7: '7', 6: '6', 5: '5', 4: '4', 3: '3', 2: '2', 1: '1'}\n",
    "    # highest value of the hand\n",
    "    hv = high_card(l)\n",
    "    if rating[hv-1] in l:\n",
    "        if rating[hv-2] in l:\n",
    "            if rating[hv-3] in l:\n",
    "                if rating[hv-4] in l:\n",
    "                    return 5\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 6 if all All cards of the same suit\n",
    "def flush(l):\n",
    "    if len(set(l)) == 1:\n",
    "        return 6\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 7 if Three of a kind and a pair\n",
    "def full_house(l):\n",
    "    if three_of_a_kind(l):\n",
    "        if number_of_pairs(l) == 2:\n",
    "            return 7\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 8 if Four cards of the same value\n",
    "def four_of_a_kind(l):\n",
    "    dup = Counter(l) - Counter(set(l))\n",
    "    for i in dup:\n",
    "        if dup[i] == 3:\n",
    "            return 8\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 9 if All cards are consecutive values of same suit\n",
    "def straight_flush(l, v):\n",
    "    if straight(l) and flush(v):\n",
    "        return 9\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return 10 if Ten, Jack, Queen, King, Ace, in same suit\n",
    "def royal_flush(l, v):\n",
    "    if set(['T', 'J', 'Q', 'K', 'A']) == set(l):\n",
    "        if len(set(v)) == 1:\n",
    "            return 10\n",
    "    return 0\n",
    "\n",
    "\n",
    "# return largest number, if there is a pair in the hand\n",
    "def paired_number(l):\n",
    "    repeated = (Counter(l) - Counter(set(l))).keys()\n",
    "    rating = {'A': 14, 'K': 13, 'Q': 12, 'J': 11, 'T': 10, '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2, '1': 1}\n",
    "    highest = 0\n",
    "    for i in repeated:\n",
    "        if rating[i] > highest:\n",
    "            highest = rating[i]\n",
    "    return highest\n",
    "\n",
    "\n",
    "# open poker.txt file\n",
    "f = open('D:\\Rosebay\\Data Akuisisi\\poker.txt')\n",
    "\n",
    "# read all the game conditions in the file\n",
    "games = f.read()\n",
    "\n",
    "# close the file\n",
    "f.close()\n",
    "\n",
    "# make a list of hands in each game\n",
    "two_hands = games.strip().split('\\n')\n",
    "\n",
    "# hands list to store the cards and suites of each player for a given game\n",
    "hands = []\n",
    "\n",
    "# for loop to convert hand to a list\n",
    "for i in two_hands:\n",
    "    # player 1 hand\n",
    "    fh = convert_to_lists(i[:14])\n",
    "    # player 2 hand\n",
    "    sh = convert_to_lists(i[15:])\n",
    "    hands.append([fh, sh])\n",
    "\n",
    "# number of times player 1 wins\n",
    "player1 = 0\n",
    "\n",
    "# take each game\n",
    "for i in hands:\n",
    "    # card values of player 1\n",
    "    p1v = i[0][0]\n",
    "    # card values of player 2\n",
    "    p2v = i[1][0]\n",
    "    # suites of player 1\n",
    "    p1s = i[0][1]\n",
    "    # suites of player 2\n",
    "    p2s = i[1][1]\n",
    "    # score of player 1\n",
    "    p1 = 0\n",
    "    # score of player 2\n",
    "    p2 = 0\n",
    "    # flag for checking the paired cards\n",
    "    flag = False\n",
    "    # conditions for player 1\n",
    "    if number_of_pairs(p1v):\n",
    "        p1 = number_of_pairs(p1v)\n",
    "        flag = True\n",
    "    if three_of_a_kind(p1v):\n",
    "        p1 = three_of_a_kind(p1v)\n",
    "        flag = True\n",
    "    if straight(p1v):\n",
    "        p1 = straight(p1v)\n",
    "    if flush(p1s):\n",
    "        p1 = flush(p1s)\n",
    "    if full_house(p1v):\n",
    "        p1 = full_house(p1v)\n",
    "        flag = True\n",
    "    if four_of_a_kind(p1v):\n",
    "        p1 = four_of_a_kind(p1v)\n",
    "        flag = True\n",
    "    if straight_flush(p1v, p1s):\n",
    "        p1 = straight_flush(p1v, p1s)\n",
    "    if royal_flush(p1v, p1s):\n",
    "        p1 = royal_flush(p1v, p1s)\n",
    "\n",
    "    # conditions for player 2\n",
    "    if number_of_pairs(p2v):\n",
    "        p2 = number_of_pairs(p2v)\n",
    "        flag = True\n",
    "    if three_of_a_kind(p2v):\n",
    "        p2 = three_of_a_kind(p2v)\n",
    "        flag = True\n",
    "    if straight(p2v):\n",
    "        p2 = straight(p2v)\n",
    "    if flush(p2s):\n",
    "        p2 = flush(p2s)\n",
    "    if full_house(p2v):\n",
    "        p2 = full_house(p2v)\n",
    "        flag = True\n",
    "    if four_of_a_kind(p2v):\n",
    "        p2 = four_of_a_kind(p2v)\n",
    "        flg = True\n",
    "    if straight_flush(p2v, p2s):\n",
    "        p2 = straight_flush(p2v, p2s)\n",
    "    if royal_flush(p2v, p2s):\n",
    "        p2 = royal_flush(p2v, p2s)\n",
    "\n",
    "    # score more for player 1\n",
    "    if p1 > p2:\n",
    "        player1 += 1\n",
    "    # both players same score\n",
    "    elif p1 == p2:\n",
    "        # cards having pairs\n",
    "        if flag:\n",
    "            # condition with highest in a pair\n",
    "            if paired_number(i[0][0]) > paired_number(i[1][0]):\n",
    "                player1 += 1\n",
    "            # condition with equal highest in a pair\n",
    "            elif paired_number(i[0][0]) == paired_number(i[1][0]):\n",
    "                if high_card(i[0][0]) > high_card(i[1][0]):\n",
    "                    player1 += 1\n",
    "        # cards not having pairs\n",
    "        else:\n",
    "            if high_card(i[0][0]) > high_card(i[1][0]):\n",
    "                player1 += 1\n",
    "\n",
    "# printing number of times player 1 wins\n",
    "print (player1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
